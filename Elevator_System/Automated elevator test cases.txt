

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

public class ElevatorTest {

    @Test
    public void testElevatorMovementUp() {
        Building building = new Building(5);
        Elevator elevator = building.getElevator();

        elevator.moveToFloor(3);
        assertEquals(3, elevator.getCurrentFloor(), "Elevator should be on floor 3");

        elevator.moveToFloor(5);
        assertEquals(Direction.UP, elevator.getDirection(), "Elevator should move up");
        assertEquals(5, elevator.getCurrentFloor(), "Elevator should be on floor 5");
    }

    @Test
    public void testElevatorMovementDown() {
        Building building = new Building(5);
        Elevator elevator = building.getElevator();

        elevator.moveToFloor(5);
        assertEquals(5, elevator.getCurrentFloor(), "Elevator should be on floor 5");

        elevator.moveToFloor(1);
        assertEquals(Direction.DOWN, elevator.getDirection(), "Elevator should move down");
        assertEquals(1, elevator.getCurrentFloor(), "Elevator should be on floor 1");
    }

    @Test
    public void testEmergencyStop() {
        Building building = new Building(5);
        Elevator elevator = building.getElevator();

        elevator.moveToFloor(3);
        assertEquals(3, elevator.getCurrentFloor(), "Elevator should be on floor 3");

        elevator.moveToFloor(5);
        assertEquals(Direction.UP, elevator.getDirection(), "Elevator should move up");

        elevator.moveToFloor(3); // Simulate emergency stop

        assertEquals(Direction.NONE, elevator.getDirection(), "Elevator should stop moving");
        assertEquals(3, elevator.getCurrentFloor(), "Elevator should remain on floor 3");
    }

    @Test
    public void testDoorTiming() {
        Building building = new Building(5);
        Elevator elevator = building.getElevator();

        elevator.moveToFloor(3);
        assertEquals(3, elevator.getCurrentFloor(), "Elevator should be on floor 3");

        elevator.openDoor();

        try {
            TimeUnit.SECONDS.sleep(4); // Wait for 4 seconds
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        assertTrue(elevator.isDoorOpen(), "Elevator door should remain open for sufficient time");

        elevator.closeDoor();

        assertFalse(elevator.isDoorOpen(), "Elevator door should be closed after a delay");
    }

    @Test
    public void testOverloadedElevator() {
        Building building = new Building(5);
        Elevator elevator = building.getElevator();

        for (int i = 0; i < 6; i++) {
            Passenger passenger = new Passenger(5);
            elevator.addPassenger(passenger);
        }

        assertTrue(elevator.isOverloaded(), "Elevator should be overloaded");

        elevator.moveToFloor(3);

        assertEquals(1, elevator.getCurrentFloor(), "Elevator should not move when overloaded");

        elevator.removePassenger(elevator.getPassengers().get(0)); // Remove a passenger

        assertFalse(elevator.isOverloaded(), "Elevator should not be overloaded after removing passengers");

        elevator.moveToFloor(3);

        assertEquals(3, elevator.getCurrentFloor(), "Elevator should move when not overloaded");
    }

    @Test
    public void testButtonResponseTime() {
        Building building = new Building(5);
        Elevator elevator = building.getElevator();

        long startTime = System.currentTimeMillis();

        elevator.moveToFloor(3);

        long endTime = System.currentTimeMillis();

        long responseTime = endTime - startTime;

        assertTrue(responseTime <= 100, "Button response time should be acceptable");
    }

    @Test
    public void testDeselectFloorButton() {
        Building building = new Building(5);
        Elevator elevator = building.getElevator();

        elevator.pressFloorButton(2); // Mistakenly press button 2
        elevator.pressFloorButton(4); // Press button 4 for desired floor

        for (int i = 0; i < 2; i++) {
            elevator.pressFloorButton(2); // Deselect button 2
        }

        assertFalse(elevator.isFloorSelected(2), "Second floor should be deselected");
    }

    @Test
    public void testDoorRemainsOpenWhenObstructed() {
        Building building = new Building(5);
        Elevator elevator = building.getElevator();

        elevator.openDoor(); // Simulate opening the door

        elevator.obstructionDetected(); // Simulate obstruction between closing doors

        assertTrue(elevator.isDoorOpen(), "Elevator door should remain open when obstructed");
    }

    @Test
    public void testEmergencyLightAndDestinedFloorWhenPowerOff() {
        Building building = new Building(5);
        Elevator elevator = building.getElevator();

        elevator.powerOff(); // Simulate power outage

        assertTrue(elevator.isEmergencyLightActivated(), "Emergency light should be activated when power is off");

        elevator.moveToFloor(3); // Simulate reaching the destined floor

        assertEquals(3, elevator.getCurrentFloor(), "Elevator should reach the destined floor when power is off");
    }